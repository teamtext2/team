<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ứng dụng dịch thuật</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Light gray background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
        }
        .container {
            background-color: #ffffff;
            border-radius: 16px; /* Rounded corners */
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); /* Soft shadow */
            padding: 32px;
            width: 100%;
            max-width: 800px; /* Max width for larger screens */
            display: flex;
            flex-direction: column;
            gap: 24px;
            animation: fadeIn 0.8s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        textarea {
            resize: vertical; /* Allow vertical resizing */
            min-height: 120px;
            max-height: 300px;
            padding: 12px;
            border: 1px solid #d1d5db; /* Light gray border */
            border-radius: 8px;
            font-size: 1rem;
            line-height: 1.5;
            color: #374151; /* Dark gray text */
            transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        textarea:focus {
            outline: none;
            border-color: #6366f1; /* Purple border on focus */
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2); /* Soft focus ring */
        }
        .button-primary {
            background-color: #6366f1; /* Purple background */
            color: #ffffff;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.125rem;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out, box-shadow 0.2s ease-in-out;
            box-shadow: 0 4px 10px rgba(99, 102, 241, 0.3); /* Button shadow */
        }
        .button-primary:hover {
            background-color: #4f46e5; /* Darker purple on hover */
            transform: translateY(-2px); /* Slight lift effect */
            box-shadow: 0 6px 15px rgba(99, 102, 241, 0.4);
        }
        .button-primary:active {
            transform: translateY(0); /* Press down effect */
            box-shadow: 0 2px 5px rgba(99, 102, 241, 0.2);
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #6366f1; /* Purple spinner */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            display: none; /* Hidden by default */
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .error-message {
            color: #ef4444; /* Red color for errors */
            font-size: 0.875rem;
            margin-top: 8px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold text-center text-gray-800">Dịch thuật siêu tốc</h1>

        <!-- Input Section -->
        <div>
            <label for="inputText" class="block text-gray-700 text-sm font-medium mb-2">Nhập văn bản của bạn (tối đa 500 ký tự):</label>
            <textarea id="inputText" class="w-full" placeholder="Nhập văn bản cần dịch vào đây..."></textarea>
            <p id="charCount" class="text-right text-sm text-gray-500 mt-1">0/500 ký tự</p>
        </div>

        <!-- Translation Direction Selector -->
        <div>
            <label for="translationDirection" class="block text-gray-700 text-sm font-medium mb-2">Chọn hướng dịch:</label>
            <select id="translationDirection" class="w-full p-3 border border-gray-300 rounded-lg text-gray-700 focus:outline-none focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 transition duration-200 ease-in-out">
                <option value="vi-en">Tiếng Việt sang Tiếng Anh</option>
                <option value="en-vi">Tiếng Anh sang Tiếng Việt</option>
            </select>
        </div>

        <!-- Translate Button -->
        <button id="translateButton" class="button-primary">Dịch ngay!</button>
        <div id="loadingSpinner" class="loading-spinner"></div>
        <p id="errorMessage" class="error-message hidden"></p>

        <!-- Output Section -->
        <div>
            <label for="outputText" class="block text-gray-700 text-sm font-medium mb-2">Kết quả dịch:</label>
            <textarea id="outputText" class="w-full bg-gray-50 cursor-not-allowed" readonly placeholder="Kết quả dịch sẽ hiển thị ở đây..."></textarea>
        </div>
    </div>

    <script>
        // Lấy các phần tử DOM
        const inputText = document.getElementById('inputText');
        const outputText = document.getElementById('outputText');
        const translationDirection = document.getElementById('translationDirection');
        const translateButton = document.getElementById('translateButton');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const errorMessage = document.getElementById('errorMessage');
        const charCount = document.getElementById('charCount');

        // API Key placeholder
        const GEMINI_API_KEY = "AIzaSyB9k9gwZl7iHSyYxbhKjAtpkooS_nriqBg"; // Thay thế "api#key" bằng API Key thật của bạn

        // Giới hạn ký tự
        const MAX_CHARS = 500;

        // Cập nhật số ký tự khi người dùng nhập
        inputText.addEventListener('input', () => {
            const currentLength = inputText.value.length;
            if (currentLength > MAX_CHARS) {
                inputText.value = inputText.value.substring(0, MAX_CHARS);
                charCount.textContent = `${MAX_CHARS}/${MAX_CHARS} ký tự (đã đạt giới hạn)`;
                charCount.classList.add('text-red-500');
            } else {
                charCount.textContent = `${currentLength}/${MAX_CHARS} ký tự`;
                charCount.classList.remove('text-red-500');
            }
        });

        // Hàm hiển thị thông báo lỗi
        function showErrorMessage(message) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
        }

        // Hàm ẩn thông báo lỗi
        function hideErrorMessage() {
            errorMessage.classList.add('hidden');
            errorMessage.textContent = '';
        }

        // Xử lý sự kiện khi nhấn nút Dịch
        translateButton.addEventListener('click', async () => {
            const textToTranslate = inputText.value.trim();
            const direction = translationDirection.value;

            // Ẩn thông báo lỗi cũ
            hideErrorMessage();
            outputText.value = ''; // Xóa kết quả cũ

            // Kiểm tra nếu văn bản rỗng
            if (!textToTranslate) {
                showErrorMessage('Vui lòng nhập văn bản bạn muốn dịch.');
                return;
            }

            // Kiểm tra giới hạn ký tự
            if (textToTranslate.length > MAX_CHARS) {
                showErrorMessage(`Văn bản quá dài. Vui lòng nhập tối đa ${MAX_CHARS} ký tự.`);
                return;
            }

            // Hiển thị loading spinner và vô hiệu hóa nút
            loadingSpinner.style.display = 'block';
            translateButton.disabled = true;
            translateButton.classList.add('opacity-50', 'cursor-not-allowed');

            let prompt = "";
            if (direction === "vi-en") {
                prompt = `dịch văn bản này sang tiếng anh như người mỹ viết và chỉ cần phản hồi kết quả: ${textToTranslate}`;
            } else { // en-vi
                // Đã sửa prompt theo yêu cầu của Nhật Anh
                prompt = `Translate this text into Vietnamese and only give feedback on the results, note that only feedback on the results and no further answers are needed.: ${textToTranslate}`;
            }

            try {
                // Chuẩn bị payload cho API
                const chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };

                // URL API của Gemini
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

                // Gửi yêu cầu đến API
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                // Kiểm tra nếu phản hồi không thành công
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`Lỗi API: ${errorData.error.message || response.statusText}`);
                }

                const result = await response.json();

                // Kiểm tra cấu trúc phản hồi và hiển thị kết quả
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const translatedText = result.candidates[0].content.parts[0].text;
                    outputText.value = translatedText;
                } else {
                    showErrorMessage('Không thể lấy kết quả dịch. Vui lòng thử lại.');
                    console.error('Cấu trúc phản hồi API không mong muốn:', result);
                }

            } catch (error) {
                console.error('Lỗi khi gọi API dịch thuật:', error);
                showErrorMessage(`Đã xảy ra lỗi: ${error.message}. Vui lòng thử lại.`);
            } finally {
                // Ẩn loading spinner và kích hoạt lại nút
                loadingSpinner.style.display = 'none';
                translateButton.disabled = false;
                translateButton.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        });
    </script>
</body>
</html>
